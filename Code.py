# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L0ONN1GGEo5XoYC4yBjdg371FC2Lwih2
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV,train_test_split
from sklearn import metrics
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import SGDRegressor,LinearRegression
from sklearn.decomposition import PCA
import plotly.graph_objs as go
import plotly.figure_factory as ff
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.neighbors import *
from sklearn.ensemble import RandomForestRegressor

df = pd.read_csv("CompletionRates (2).csv") 
df.head()

df.describe()

#Using corelation to find the fearures that highly affect the results
cor = df.corr()
cor_target = abs(cor["HECR"])

#Selecting highly correlated features , minimum corelation vaue cor_bound
cor_bound=0.2
relevant_features = cor_target[cor_target>cor_bound]

#printing highly 
print(relevant_features)

final_df= df[relevant_features.index]
final_df.head()

sns.pairplot(final_df)
plt.show()

# Dividing input and output
X=final_df.drop("HECR",1)
y=final_df["HECR"]

# Selecting test and traing data 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.35, random_state=42)

#training linear regression model 1 with respective Hyperparameters
model1 = LinearRegression(fit_intercept=True, normalize=True)
model1.fit(X_train, y_train)

#Testing the model 1
score=model1.score(X_test,y_test)
#printing score or accuracy
print("Accuracy ",round(score,3)*100)

# Training model 2 with adeuate Hyperparametor valuies
model2 = RandomForestRegressor(n_estimators=200,criterion="mse",max_features="auto",random_state=10)
  
# fit the regressor with x and y data
model2.fit(X_train, y_train)

#Testing the model 2
score2=model2.score(X_test,y_test)
#printing score or accuracy
print("Accuracy ",round(score2,3)*100)

